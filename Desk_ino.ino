#include "arduino_secrets.h"
#include "thingProperties.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/626c7d36-2972-4f3c-9351-b11f2bf034ac 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudColor led_color;
  bool on;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

int l = 0;
const int pResistor = A0;
const int pin_r = 9;  // porta 11 da collegare all’anodo “rosso” del modulo RGB
const int pin_g = 8;  // porta 10 da collegare all’anodo “verde” del modulo RGB
const int pin_b = 7;
const int pin_w[] = { 13, 12, 11, 10 };
const int echoPin = 6;
const int trigPin = 5;
long duration = 0;
int distance = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);
  // Defined in thingProperties.h
  initProperties();
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(3);
  ArduinoCloud.printDebugInfo();

  pinMode(pResistor, INPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  for (int i = 0; i < 4; i++) {
    pinMode(pin_w[i], OUTPUT);
  }
}

void loop() {
  ArduinoCloud.update();

  //measure();


  if (on == 1) {
    l = analogRead(pResistor);
    //Serial.println(l);
    if (l < 10) {
      measure();
      if (distance < 150) {
        onLedColorChange();

        for (int i = 0; i < 4; i++) {
          digitalWrite(pin_w[i], HIGH);
        }
        delay(10000);
      }
    } else {
      rgb_off();
      for (int i = 0; i < 4; i++) {
        digitalWrite(pin_w[i], LOW);
      }
    }
  } else {
    rgb_off();
  }
}





/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange() {
  // Add your code here to act upon Led change
  if (on == 0) {
    rgb_off();
    for (int i = 0; i < 4; i++) {
      digitalWrite(pin_w[i], LOW);
    }
  }
}

void rgb_color(int red, int green, int blue) {
  analogWrite(pin_r, red);
  analogWrite(pin_g, green);
  analogWrite(pin_b, blue);
}

void rgb_off() {
  analogWrite(pin_r, 0);
  analogWrite(pin_g, 0);
  analogWrite(pin_b, 0);
}

void measure() {
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2;
  // Prints the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.println(distance);
}

/*
  Since LedColor is READ_WRITE variable, onLedColorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedColorChange() {
  // Add your code here to act upon LedColor change
  uint8_t r, g, b;
  led_color.getValue().getRGB(r, g, b);
  rgb_color(r, g, b);
}


/*
  Since On is READ_WRITE variable, onOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onOnChange() {
  // Add your code here to act upon On change
}

/*
  Since LightOn is READ_WRITE variable, onLightOnChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightOnChange() {
  // Add your code here to act upon LightOn change
}